.. sectnum::

========================
GroupServer Installation
========================

:Authors: Michael JasonSmith; Richard Waid; Alice Murphy; Dan Randow
:Contact: Michael JasonSmith <mpj17@onlinegroups.net>
:Date: 2010-03-09
:Organization: `GroupServer.org <http://groupserver.org>`_
:Copyright: OnlineGroups.Net, licensed under a 
  `Creative Commons Attribution-Share Alike 3.0 New Zealand License
  <http://creativecommons.org/licenses/by-sa/3.0/nz/>`_

Introduction
============

Installing GroupServer requires the installation and configuration of
five different components:

  #. A `database server`_,
  #. `Zope`_
  #. `GroupServer`_ itself, 
  #. An `email server`_, and
  #. An optional `web server`_.
  
Requirements
------------

GroupServer is developed on `Ubuntu <http://ubuntu.com/>`_, and is
know to run on `CentOS <http://centos.org/>`_. Below the packages in
Ubuntu that are required to install GroupServer are listed.

+----------------------+---------------------------------+
| System               | Ubuntu Package                  |
+======================+=================================+
| Python               | ``python2.4``                   |
|                      +---------------------------------+
|                      | ``python-virtialenv``           |
+----------------------+---------------------------------+
| GNU C++ Compiler     | ``g++``                         |
+----------------------+---------------------------------+
| PostgreSQL Database  | ``postgresql``                  |
|                      +---------------------------------+
|                      | ``posgresql-server-8.4``        |
|                      +---------------------------------+
|                      | ``libpq-dev``                   |
+----------------------+---------------------------------+
| Postfix Email Server | ``postfix``                     |
|                      +---------------------------------+
|                      | ``postfix-dev``                 |
+----------------------+---------------------------------+
| Compression          | ``libzzip-dev`` (from universe) |
|                      +---------------------------------+
|                      | ``lib64z1-dev`` (from main)     |    
+----------------------+---------------------------------+

Database Server
===============

GroupServer uses the PostgreSQL relational database to store data. In
theory other relational databases could be used, but none have been
tried.

Turning Off Security
--------------------

Database administrators who know what they are doing should ignore this
section. For humble administrators that just want to try GroupServer,
life is easier if the excellent security in PostgreSQL is disabled. To
turn off security, change the bottom few lines in the 
``/etc/postgresql/8.4/main/pg_hba.conf`` file (you will have to be root
to modify it)::

  # Database administrative login by UNIX sockets
  local   all         postgres                          trust
  # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
  # "local" is for Unix domain socket connections only
  local   all         all                               trust
  # IPv4 local connections:
  host    all         all         127.0.0.1/32          trust
  # IPv6 local connections:
  host    all         all         ::1/128               trust

PosgreSQL will have to be restarted after the ``pg_hba.conf`` file has
been modified::
  
  $ sudo /etc/init.d/posgtresql-8.4 restart

For those who value privacy, security and trust, and want to 
understand more of PostgreSQL we recommend 
`PostgreSQL User Administration by David Pashley 
<http://www.davidpashley.com/articles/postgresql-user-administration.html>`_

Zope
====

Installing Zope is carried out in three parts: first you 
`configure Zope`_, next `run buildout`_ to install Zope as well as 
GroupServer, and finally `start Zope`_. After that you will be able to
configure and start `GroupServer`_.

Configure Zope
--------------

The configuration of Zope is carried out by modifying ``instance.cfg``,
which is located in the root of the GroupServer folder. The ``cfg`` file
is interpreted by the Python `ConfigParser module
<http://docs.python.org/library/configparser.html>`_, which accepts
a syntax very similar to Windows INI files. The user-configurable 
options are in the ``config`` section.

``pgsql_host``
  The host that runs the PostgreSQL database. It defaults to the local
  machine, ``localhost``.
  
``pgsql_port``
  The IP port that PosgtreSQL listens  to. It is set to the default
  port for Ubuntu; it may be 5433 if multiple versions of PostgreSQL 
  are installed

``pgsql_dbname``
  During installation of GroupServer a database will be created in
  PostgreSQL. The ``pgsql_dbname`` option defines the name of the 
  database.

``pgsql_admin``
  I have  no idea what this option does. **TODO** fix.
  
``pgsql_user``
  The name of the database user that will connect to the GroupServer
  database and modify the data. The database user is separate from the
  other users on the system, including those that log into the computer
  and those in Zope.

``pgsql_password``
  The password required to attach to the PostgreSQL database as the
  ``pgsql_user``. May be blank.
  
``zope_host``
  The host that will run Zope. It defaults to the local machine.
  
``zope_port``
  The IP port that Zope should listen to. It defaults to 8080. Zope will
  have to run as ``root`` to use port 80, and this is not recommended.
  
``zope_admin``
  The name of the user who will administer Zope.
  
``zope_pass``
  The password for the Zope administrator. It can (and should) be 
  changed after GroupServer has been set up.

Run Buildout
------------

`Buildout <http://www.buildout.org/>`_ is the python-based system that
we use to download and installs Zope, GroupServer, and all the libraries
that they both require. To run buildout, first create a virtual Python
installation::

  $ virtualenv -p python2.4 .

This creates a sandbox for buildout with its own version of python, 
placed in ``./bin/``. When buildout runs it will install all the 
packages in the sandbox. The version of Python that is maintained by
your Linux distribution will be untouched. 

You many need to upgrade ``setuptools`` from the version shipped
with your distribution. To do this, run the local version of
``easy_install``::

  $ ./bin/easy_install -U setuptools

No harm will come if you try and upgrade but nothing needs to change.
Next, run the  ``bootstrap.py`` script to download and install the 
buildout system::

  $ ./bin/python bootstrap.py

Finally, run ``buildout``::

  $ ./bin/buildout -v

Buildout takes a while, as it will download and install all the 
requirements for GroupServer, including:
  
* Zope 2.9
* PIL
* ``lxml``
* SQL Alchemy
* ``psycopg2``

It is a good idea to make a cup of coffee, or go to lunch, while 
buildout processes. 

Start Zope
----------

To start the Zope *instance* as a daemon process run the following 
command::

  $ ./bin/instance start

Zope will have started when the message ``Zope Ready to handle 
requests`` is displayed.

GroupServer
===========

Configuring GroupServer to display a site is done three steps,
first you `pick a host name`_, then `set up virtual hosting`_ before
you `set up GroupServer`_.

Pick a Host Name
----------------

For a trial system this name can be set up in the ``hosts(5)`` file.

* Open ``/etc/hosts`` as ``root``.
* Add the new host name to the ``localhost`` entry, which is normally
  the first one. For example, to add the name ``gstest`` change the
  line to the following::

    127.0.0.1    localhost gstest

* Save the ``hosts`` file.

Set Up Virtual Hosting
----------------------

There are two ways to provide virtual hosting: relying on the inbuilt
virtual hosting in Zope, or using an external `web server`_. In this
section we document how to set up virtual hosting in Zope.

* Log into the *Zope Management Interface* (ZMI) by going to
  ``http://{zope_host}:{zope_port}/manage``.  If you did not change
  the defaults when you configured Zope the ZMI address will be
  <http://localhost:8080/manage>. You will be prompted for a user name
  (which defaults to ``admin``) and a password (which also defaults to
  ``admin``).
* Click on ``virtual_hosting`` at the root of the Zope site.
* Click on the *Mappings* tab at the top of the page.
* Add the following line::

    gstest/example/Content/example_site/++skin++skin_gs_base

  + The text before the first ``/`` is the name of the host,
    ``gstest``, which you set up earlier.
  + The text after the first ``/`` is the path to the GroupServer site,
    ``example/Content/example_site/``, which you will configure in the
    next section.
  + The final part is the *skin* directive, which selects the Zope skin
    to use. The base skin for GroupServer (black and white) is shown in
    the above example: ``++skin++skin_gs_base``.

* Click the *Save Changes* button.

Set Up GroupServer
------------------

To configure the new GroupServer instance carry out the following steps.

* A default GroupServer instance would have been created during
  installation. Open it by clicking on ``example (Example Site)``.
  *TODO:* Rename it to ``Example Instance`` to stop confusion with the
  ``example_site``.
* The configuration options that are shared by all sites in the
  GroupServer instance are stored in the ``GlobalConfguration``.

  **supportEmail**
  
    This is the address that all support email messages should be
    sent to. You should change it to something other than 
    ``example@example.com``. 
    
    + *TODO:* Change the example support email address.
    + *TODO:*  Why does it have a ``canonicalHost``?
    + *TODO:*  Why does it have a ``siteName``?
  
  **timezone**

    This is the timezone that will be used to represent dates and
    times. It defaults to universal time (``UTC``) but can be set other
    zones including
  
    - ``Pacific/Auckland``
    - ``Europe/London``
    - ``America/New_York``
    - ``America/Los_Angeles``
  
* Navigate to the ``example_site``, which is in the ``Content`` folder
  of the ``example`` instance.
  
  + Open the ``DivisionConfiguration``. This contains the basic
    configuration for the site.
  + Change **canonicalHost** to the host name you picked earlier.
    (Think of the ``canonicalHost`` as a reverse lookup for GroupServer:
    the virtual hosting maps a host-name to a site, while the canonical
    host maps the site to a host name.)
    
* View the site
    
Email Server
============

Configuring Postfix is tricky, and is optional: you can use the Web
interface to GroupServer without configuring the email server.
However, Postfix is required to provide the email interface for
GroupServer. GroupServer uses Postfix to:

* Queue email that is delivered to groups,
* Pass the email messages to GroupServer, and
* Send email messages from GroupServer to the email accounts of the
  group members.

Determine Your Setup
--------------------

**POSTFIX_CONFIG_PATH**
  The path to your postfix configuration, perhaps ``/etc/postfix``
   
**POSTFIX_USER**
  The user which postfix uses to execute external scripts. To determine
  this you can use the following command::
  
  /usr/sbin/postconf | grep default_privs
				
**POSTFIX_GROUP**
  The user-group to which postfix belongs.
				
**PATH_TO_GROUPSERVER** 
  The path in which you have installed GroupServer.

**DOMAIN_NAME**
  The domain name as configured when you `set up virtual hosting`_.
  
Change the Configuration
------------------------

* Open ``POSTFIX_CONFIG_PATH/main.cf`` in a text editor.
* Find the ``alias_maps`` parameter.
* Add the following on a line below the existing value of
  ``alias_maps``::

    hash:POSTFIX_CONFIG_PATH/groupserver.aliases

* Find the '`virtual_alias_maps`' parameter.
* Add the following::

    hash:POSTFIX_CONFIG_PATH/groupserver.virtual     

Copy the Needed Scripts
-----------------------

**Note** This step is bung. We need to fix it.

* Run the following commands::

    mkdir PATH_TO_GROUPSERVER/utils
    cp eggs/Products.XWFMailingListManager*/Products/XWFMailingListManager/smtp2zope*py PATH_TO_GROUPSERVER/utils
    chown POSTFIX_USER.POSTFIX_GROUP PATH_TO_GROUPSERVER/utils/smtp2zope*py
    chmod 750 ZOPE_PATH_TO_GROUPSERVER/utils/smtp2zope*py

* Edit ``PATH_TO_GROUPSERVER/utils/smtp2zope.py`` and 
  ``PATH_TO_GROUPSERVER/utils/smtp2zope-nonautomatic.py``
  
  + Change ``AUTHORIZATION`` to match the username and password you 
    set when you `set up GroupServer`_ [really?]

GroupServer Postifx Configuration
---------------------------------

* Create a file called ``POSTFIX_CONFIG_PATH/groupserver.aliases``.
* Set the contents to the following::

    verify-address:   "|PATH_TO_GROUPSERVER/utils/smtp2zope-nonautomatic.py http://DOMAINNAME/acl_users/verify_address"
    group-automagic:  "|PATH_TO_GROUPSERVER/utils/smtp2zope.py  http://DOMAINNAME/ListManager"

* Create a file called ``POSTFIX_CONFIG_PATH/groupserver.virtual``.
* Set the contents to the following::

    DOMAINNAME           virtual
    verify@DOMAINNAME    verify-address
    @DOMAINNAME          group-automagic
    
* Run the commands [as root?]::

			postalias POSTFIX_CONFIG_PATH/groupserver.aliases
			postmap POSTFIX_CONFIG_PATH/groupserver.virtual
			postfix reload

Web Server
==========

A web server is not required to try GroupServer. However, for production
sites it is a good idea to run a web server to provide the following
services:

* To mediate between the low level HTTP port (port 80) and the 
  high-port that `Zope`_ runs on (normally port 8080).
* To rewrite the URL to include a skin directive.
* To rewrite the URL to support virtual hosting.
* To provide caching.

GroupServer is known to work with many Web servers including 
Varnish, NGINX, ha_proxy, and Apache. For Apache a rewrite rule that is
required to provide the mapping look something like the one in the 
example file ``apache-groupserver``.

